[gcode_macro _TIMELAPSE_NEW_FRAME]
gcode:
    {action_call_remote_method("timelapse_newframe")}

[gcode_macro _TIMELAPSE_MODE_FIXED]
variable_x: 20
variable_y: 290
gcode: 
    G0 F36000 X{x} Y{y}

[gcode_macro _TIMELAPSE_MODE_X_PROGRESS]
variable_x_offset: 20
variable_y: 290
gcode: 
    {% set progress = printer.virtual_sdcard.progress %}
    {% set minX = printer.toolhead.axis_minimum.x + x_offset %}
    {% set maxX = printer.toolhead.axis_maximum.x - x_offset %}
    {% set frameX = ((maxX - minX) * progress) + x_offset %}

    G0 F36000 X{frameX} Y{y}

[gcode_macro _TIMELAPSE_MODE_SPIRAL]
gcode: 
  # This is evil, don't do what I do
  {% set math = printer.__class__.__init__.__globals__['__builtins__']['__import__']('math') %}

  {% set progress = printer.virtual_sdcard.progress %}
  {% set center_x = (printer.toolhead.axis_maximum.x - printer.toolhead.axis_minimum.x) / 2 + printer.toolhead.axis_minimum.x %}
  {% set center_y = (printer.toolhead.axis_maximum.y - printer.toolhead.axis_minimum.y) / 2 + printer.toolhead.axis_minimum.y %}
  {% set radius = ([printer.toolhead.axis_maximum.x - printer.toolhead.axis_minimum.x, printer.toolhead.axis_maximum.y - printer.toolhead.axis_minimum.y] | min) / 3 %}

  {% set y = center_y + radius * math.sin(2 * math.pi * progress) %}
  {% set x = center_x + radius * math.cos(2 * math.pi * progress) %}

  G0 F36000 X{x} Y{y}

[gcode_macro TIMELAPSE_TAKE_FRAME]
gcode: 
  _TIMELAPSE_NEW_FRAME

[gcode_macro _TIMELAPSE_TAKE_FRAME]
variable_mode: "SPIRAL"
gcode:
  SAVE_GCODE_STATE NAME=TIMELAPSE_TAKE_FRAME

    {% set startPos = printer.toolhead.position %}
    
    M83
    G1 F1200
    G1 E-4 F2400
    G0 F24000 Z{startPos.z + 4}

    {% if mode == "SPIRAL" %}       _TIMELAPSE_MODE_SPIRAL
    {% elif mode == "X_PROGRESS" %} _TIMELAPSE_MODE_X_PROGRESS
    {% else %}                      _TIMELAPSE_MODE_FIXED
    {% endif %}

    _TIMELAPSE_NEW_FRAME
    
    G1 E4 F1200
    G0 F36000 X{startPos.x} Y{startPos.y}
    G0 F24000 Z{startPos.z}

  RESTORE_GCODE_STATE NAME=TIMELAPSE_TAKE_FRAME

[gcode_macro TIMELAPSE_RENDER]
gcode: 
  {action_call_remote_method("timelapse_render")}
